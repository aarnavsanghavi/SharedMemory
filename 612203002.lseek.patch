diff --git a/Makefile b/Makefile
index 09d790c..561b165 100644
--- a/Makefile
+++ b/Makefile
@@ -27,7 +27,7 @@ OBJS = \
 	uart.o\
 	vectors.o\
 	vm.o\
-
+	
 # Cross-compiling (e.g., on Mac OS X)
 # TOOLPREFIX = i386-jos-elf
 
@@ -76,11 +76,11 @@ AS = $(TOOLPREFIX)gas
 LD = $(TOOLPREFIX)ld
 OBJCOPY = $(TOOLPREFIX)objcopy
 OBJDUMP = $(TOOLPREFIX)objdump
-CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -O2 -Wall -MD -ggdb -m32 -Werror -fno-omit-frame-pointer
-CFLAGS += $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector)
+CFLAGS += -m32 -fno-stack-protector -fno-pie -nostdinc -I.
 ASFLAGS = -m32 -gdwarf-2 -Wa,-divide
 # FreeBSD ld wants ``elf_i386_fbsd''
-LDFLAGS += -m $(shell $(LD) -V | grep elf_i386 2>/dev/null | head -n 1)
+LDFLAGS += -m elf_i386
+
 
 # Disable PIE when possible (for Ubuntu 16.10 toolchain)
 ifneq ($(shell $(CC) -dumpspecs 2>/dev/null | grep -e '[^f]no-pie'),)
@@ -181,6 +181,8 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_tryhello\
+	_trylseek\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
diff --git a/syscall.c b/syscall.c
index ee85261..a5e3ee7 100644
--- a/syscall.c
+++ b/syscall.c
@@ -103,6 +103,8 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_hello(void);
+extern int sys_lseek(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +128,8 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_hello]   sys_hello,
+[SYS_lseek]   sys_lseek,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index bc5f356..a48691f 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_hello  22
+#define SYS_lseek 23
+
diff --git a/sysfile.c b/sysfile.c
index bfe61b7..624a516 100644
--- a/sysfile.c
+++ b/sysfile.c
@@ -442,3 +442,45 @@ sys_pipe(void)
   fd[1] = fd1;
   return 0;
 }
+int sys_hello(void)
+{
+	cprintf("hello world\n");
+	return 0;
+}
+int sys_lseek(void) {
+    int fd, offset, whence;
+    struct file *f;
+
+    if (argint(0, &fd) < 0 || argint(1, &offset) < 0 || argint(2, &whence) < 0)
+        return -1; // Invalid arguments
+
+    if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == 0)
+        return -1; // Invalid file descriptor
+
+    if (f->type != FD_INODE)
+        return -1; // lseek only works on regular files
+
+    switch (whence) {
+        case 0: // SEEK_SET: Set file offset to `offset`
+            if (offset < 0) return -1;
+            f->off = offset;
+            break;
+
+        case 1: // SEEK_CUR: Move from the current position
+            if (f->off + offset < 0) return -1;
+            f->off += offset;
+            break;
+
+        case 2: // SEEK_END: Move from the end of the file
+            if (f->ip->size + offset < 0) return -1;
+            f->off = f->ip->size + offset;
+            break;
+
+        default:
+            return -1; // Invalid `whence` argument
+    }
+
+    return f->off; // Return new offset
+}
+
+
diff --git a/tryhello.c b/tryhello.c
new file mode 100644
index 0000000..70538a9
--- /dev/null
+++ b/tryhello.c
@@ -0,0 +1,11 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "fs.h"
+
+int
+main(int argc,char *argv[])
+{
+	hello();
+	exit();
+}
diff --git a/user.h b/user.h
index 4f99c52..0b9b13b 100644
--- a/user.h
+++ b/user.h
@@ -23,6 +23,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int hello(void);
+int lseek(int fd, int offset, int whence);
+
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/usys.S b/usys.S
index 8bfd8a1..f9d0ca9 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,5 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(hello)
+SYSCALL(lseek)
